open import Pervasives Set_extra Assert_extra Maybe_extra

module Prelude = struct

  val rev_apply : forall 'a 'b.
    'a ->
    ('a -> 'b) ->
    'b
  let rev_apply x f = f x

  type rresult 'a = Ok of 'a | Error

  val rresult_to_option : forall 'a.
    rresult 'a ->
    maybe 'a
  let rresult_to_option r = (
      match r with
      | Ok r' -> Just r'
      | Error -> Nothing
      end)

  val from_n_to_n' :
    nat ->
    nat ->
    list nat
  let rec from_n_to_n' n n' = (
      if n > n' then []
      else
        match n' = n with
        | true -> [n']
        | false -> (from_n_to_n' n (n'-1))++[n']
      end)
end

module Store = struct
  open Prelude

  type page 'bs = Page of 'bs (* bytes *)

  type page_ref 'r = Page_ref of 'r

  val dest_page_ref : forall 'r.
    page_ref 'r ->
    'r
  let dest_page_ref (Page_ref r) = r


  type store 'r 'bs = Store of (map (page_ref 'r) (page 'bs)) (* different to paper: we store actual bytes *)

  val dest_store : forall 'r 'bs.
    store 'r 'bs ->
    map (page_ref 'r) (page 'bs)
  let dest_store m = (match m with Store m -> m end)

  val ref_to_page : forall 'r 'bs.
    store 'r 'bs ->
    page_ref 'r ->
    maybe (page 'bs)
  let ref_to_page m pr = Map.lookup pr (dest_store m)

  val insert_store : forall 'r 'bs.
    store 'r 'bs ->
    (page_ref 'r * page 'bs) ->
    store 'r 'bs
  let insert_store s0 rp =
    let (r,p) = rp in
    Store (Map.insert r p (dest_store s0))
end

module Frame = struct
  open Store

  type key 'k = Key of 'k

  val dest_key : forall 'k.
    key 'k ->
    'k
  let dest_key (Key k) = k

  type value 'v = Value of 'v
  declare {isabelle} rename type value = value_t

  val dest_value : forall 'v.
    value 'v ->
    'v
  let dest_value v = (match v with Value v -> v end)

  type node_frame 'r 'k =
    <|
      nf_n  : nat;                (* number of keys *)
      nf_ks : nat -> key 'k;      (* [nf_ks] returns the key for the given index *)
      nf_rs : nat -> page_ref 'r; (* [nf_rs] returns the page_ref for the given index --there should be nf_n + 1 page_refs stored in a [node_frame] *)
      |>

  type leaf_frame 'k 'v =
    <|
      lf_kvs : list (key 'k * value 'v);
    |>

  type frame 'r 'k 'v = Frm_I of node_frame 'r 'k | Frm_L of leaf_frame 'k 'v
end

module Ctxt = struct
  open Store
  open Frame

  (** page_to_frame *)
  
  (* note that this forces that the page internally stores its type;
  this is not necessary, but is used by step_find *)
  type page_to_frame 'bs 'k 'r 'v = P2f of (page 'bs -> frame 'r 'k 'v)

  val dest_p2f : forall 'bs 'k 'r 'v.
    page_to_frame 'bs 'k 'r 'v ->
    (page 'bs -> frame 'r 'k 'v)
  let dest_p2f p2f = (match p2f with P2f p2f -> p2f end)


  (** key_to_ref *)

  type key_to_ref 'bs 'k 'r 'v = K2r of (node_frame 'r 'k -> key 'k -> page_ref 'r)

  val dest_k2r : forall 'bs 'k 'r 'v.
    key_to_ref 'bs 'k 'r 'v ->
    (node_frame 'r 'k -> key 'k -> page_ref 'r)
  let dest_k2r k2r = (match k2r with K2r k2r -> k2r end)

  (** frame_to_page *)

  type frame_to_page 'bs 'k 'r 'v = F2p of (frame 'r 'k 'v -> page 'bs)

  val dest_f2p : forall 'bs 'k 'r 'v.
    frame_to_page 'bs 'k 'r 'v ->
    frame 'r 'k 'v ->
    page 'bs
  let dest_f2p f2p = (match f2p with F2p f2p -> f2p end)
    
  type ctxt_t 'bs 'k 'r 'v =
    <|
      ctxt_p2f         : page_to_frame 'bs 'k 'r 'v;
      ctxt_k2r         : key_to_ref    'bs 'k 'r 'v;
      ctxt_f2p         : frame_to_page 'bs 'k 'r 'v;
      ctxt_max_fanout  : nat;
      ctxt_free_p_ref  : store 'r 'bs -> (page_ref 'r * store 'r 'bs);
      ctxt_new_nf      : node_frame 'r 'k;
      (* [ctxt_add_k_pr_nf m_k r nf] adds the relation (0,r) to the nf
      if the m_k is None, elsewhere it adds the relation (k,r) at
      the index of the ordered index of k (where k = fromJust m_k)*)
      ctxt_add_k_pr_nf : (maybe (key 'k)) -> page_ref 'r -> node_frame 'r 'k -> node_frame 'r 'k;
      (* [sust_page_ref_nf old new nf] substitute old page_ref with new, if old exists in nf *)
      ctxt_subst_pr_nf : page_ref 'r -> page_ref 'r -> node_frame 'r 'k -> node_frame 'r 'k;
    |>
end

module PageRef2Frame = struct
  (* interpretation of pages *)
  open Store
  open Frame
  open Ctxt

  val page_ref_to_frame : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    maybe (frame 'r 'k 'v)
  let page_ref_to_frame ctxt s0 r0 = (
      match ref_to_page s0 r0 with
      | Nothing -> Nothing
      | Just p ->
         let p2f = dest_p2f (ctxt.ctxt_p2f) in
         Just (p2f p)
      end
    )
end

module Btree = struct
  open Frame
  open Prelude
  open PageRef2Frame
  open Ctxt       
  open Store

  type btree 'k 'v =
    Tr_nd of (nat * (nat -> key 'k) * (nat -> btree 'k 'v))
    | Tr_lf of (list (key 'k * value 'v))

  type tree_height = nat

  val btree_to_kvs : forall 'k 'v.
    btree 'k 'v ->
    list (key 'k * value 'v)
  let rec btree_to_kvs t = (
      match t with
      | Tr_lf kvs -> kvs
      | Tr_nd (nk,_,n2t) ->
         let subtrees = (List.map n2t (from_n_to_n' 0 nk)) in
         let subtrees_kvs = List.map btree_to_kvs subtrees in
         List.concat subtrees_kvs
      end)

  (* NB this has an explicit n argument, whereas wfness gives us that we can just use page_ref_to_frame *)
  val page_ref_to_btree : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (btree 'k 'v)
  let rec page_ref_to_btree ctxt s0 r0 n = (
      match n with
      | 0  -> (
        match page_ref_to_frame ctxt s0 r0 with
        | Nothing -> (rresult_to_option (Error))
        | Just frm -> (
          match frm with
          | Frm_L lf -> Just (Tr_lf (lf.lf_kvs))
          | _ -> (rresult_to_option (Error)) (* attempt to access missing page *)
          end
        )
        end
      )
      | n_plus_one ->
         let n' = n_plus_one - 1 in
         (match page_ref_to_frame ctxt s0 r0 with
          | Nothing -> (rresult_to_option (Error))
          | Just frm -> (
            match frm with
            | Frm_I nf ->
               let n  = nf.nf_n  in
               let ks = nf.nf_ks in
               let rs = nf.nf_rs in
               let (f0:(page_ref 'r -> maybe (btree 'k 'v))) =
                 (fun r ->  page_ref_to_btree ctxt s0 r n')
               in
               let prop =
                 let refs_to_trees = List.map rs (from_n_to_n' 0 n) in
                 let subtrees = List.map f0 refs_to_trees in
                 List.all isJust subtrees
               in
               (match prop with
                | true ->
                   let subtree =
                     (fun (m:nat) -> fromJust (f0 (rs m)))
                   in
                   Just(Tr_nd(n,ks,subtree))
                | _ -> (rresult_to_option (Error)) (* Frm_I was not wellformed - prop was false *)
                end)
            | _ -> (rresult_to_option (Error)) (* found Frm_L but tree_height was not 0 *)
            end)
          end)
      end)

  val page_ref_to_kvs : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (list (key 'k * value 'v))
  let page_ref_to_kvs ctxt s0 r0 n0 = (
      match page_ref_to_btree ctxt s0 r0 n0 with
      | Just t -> Just (btree_to_kvs t)
      | _ -> Nothing
      end)

  val kvs_to_map : forall 'k 'v.
    (list (key 'k * value 'v)) ->
    map (key 'k) (value 'v)
  let kvs_to_map l = Map.fromList l

  val page_ref_to_map : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    maybe (map (key 'k) (value 'v))
  let page_ref_to_map ctxt s0 r0 n0 = (
      match page_ref_to_kvs ctxt s0 r0 n0 with
      | Just l -> Just (kvs_to_map l)
      | _ -> Nothing
      end)

  val page_ref_key_to_v : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    store 'r 'bs ->
    page_ref 'r ->
    tree_height ->
    key 'k ->
    maybe (value 'v)
  let page_ref_key_to_v ctxt s0 r0 n0 k0 =
    let m0 = page_ref_to_map ctxt s0 r0 n0 in
    Maybe.bind m0 (Map.lookup k0)

  val key_to_v : forall 'r 'k 'v.
    leaf_frame 'k 'v ->
    key 'k ->
    maybe (value 'v)
  let key_to_v lf k = Map.lookup k (Map.fromList lf.lf_kvs)

end

module Find = struct
  open Frame
  open Store
  open Prelude
  open PageRef2Frame
  open Ctxt
  open Btree

  type find_state_l 'bs 'k 'r 'v =
    <|
      fsl_k : key 'k;
      fsl_r : page_ref 'r;
    |>

  type find_state_r 'bs 'k 'r 'v =
    <|
      fsr_r : page_ref 'r;
      fsr_v : maybe (value 'v);
    |>

  type find_state 'bs 'k 'r 'v =
    Fs_l of find_state_l  'bs 'k 'r 'v
    | Fs_r of find_state_r  'bs 'k 'r 'v


  val fs_step : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v)) ->
    maybe ((store 'r 'bs) * (find_state 'bs 'k 'r 'v))
  let fs_step ctxt1 s0fs0 = (
      let (s0,fs0) = s0fs0 in
      match fs0 with
      | Fs_l fsl ->
         let r0 = fsl.fsl_r in
         let k0 = fsl.fsl_k in
         (match (page_ref_to_frame ctxt1 s0 r0) with
          | Nothing -> rresult_to_option Error (* invalid page access *)
          | Just frm ->
             (match frm with
              | Frm_I nf ->
                 let k2r = dest_k2r (ctxt1.ctxt_k2r) in
                 let r'  = k2r nf k0 in
                 Just (s0, Fs_l (<|fsl with fsl_r = r'|>))
              | Frm_L lf ->
                 let k2v = key_to_v in
                 let v = k2v lf k0 in
                 Just (s0, Fs_r <| fsr_r = r0; fsr_v = v|>)
              end)
          end)
      | Fs_r _ -> rresult_to_option Error (* attempt to step Fs_r *)
      end
    )


  val fs_step_as_fun : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    tree_height ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v)) ->
    ((store 'r 'bs) * (find_state 'bs 'k 'r 'v))
  let rec fs_step_as_fun ctxt1 n0 s0fs0 = (
      let s0fs1 = fromJust (fs_step ctxt1 s0fs0) in
      (if n0 = 0
      then s0fs1
      else fs_step_as_fun ctxt1 (n0 - 1) (s0fs1))
    )
end

module Insert = struct
  open Frame
  open Store
  open Prelude
  open PageRef2Frame
  open Ctxt
  open Btree

  type ins_command 'k 'r 'v = Insert of (key 'k * value 'v) | S | D of (key 'k * page_ref 'r) | Ret

  type ins_state 'k 'r 'v =
    <|
      ins_comm : ins_command 'k 'r 'v;
      ins_r    : page_ref 'r;
      ins_pi   : list (page_ref 'r * node_frame 'r 'k);
    |>

  (* [ins kv l] appends a new entry, if the key of the new entry is
  not among the keys of the list, otherwise updates an existing
  entry *)
  val ins : forall 'k 'v.
    (key 'k * value 'v) ->
    list (key 'k * value 'v) ->
    list (key 'k * value 'v)
  let rec ins kv l =
    (match l with
     | [] -> [kv]
     | kv'::kvs ->
        (if (fst kv) = (fst kv')
        (* update entry*)
         then kv::kvs
         else kv'::(ins kv kvs))
     end)

  val insert_step : forall 'bs 'k 'r 'v.
    ctxt_t 'bs 'k 'r 'v ->
    ((store 'r 'bs) * (ins_state 'k 'r 'v) * (list(page_ref 'r))) ->
    maybe ((store 'r 'bs) * (ins_state 'k 'r 'v) * (list(page_ref 'r)))
  let insert_step ctxt conf =
    let key2ref = dest_k2r (ctxt.ctxt_k2r) in
    let frame2page = dest_f2p (ctxt.ctxt_f2p) in
    let (s0,ins_state,old_rs) = conf in
    let ins_c  = ins_state.ins_comm in
    let r0 = ins_state.ins_r in
    let pi = ins_state.ins_pi in
    (match ins_c with
     (* descending the tree*)
     | Insert(k,v) ->
      (match page_ref_to_frame ctxt s0 r0 with
       | Nothing -> (rresult_to_option (Error)) (*attempt to access unexisting page*)
       (* we found a node: we add a new page_ref to pi for duplication
       and keep navigating the path *)
       | Just (Frm_I nf) ->
          let r1 = key2ref nf k in
          let (r0',s1) = ctxt.ctxt_free_p_ref s0 in
          (* we add the new page_ref to pi *)
          (* we keep navigating using r1 *)
          let ins_state' = <|ins_state with ins_r=r1; ins_pi=(r0',nf)::(pi)|> in
          (Just (s1,ins_state',(r0::old_rs)))
       (* we found a leaf: we can insert our entry (k,v)*)
       | Just (Frm_L lf) ->
          (* we prepare the new page_ref *)
          let (r0',s1) = ctxt.ctxt_free_p_ref s0 in
          let kvs' = ins (k,v) (lf.lf_kvs) in
          (* have we filled the leaf?*)
          if (length kvs' < ctxt.ctxt_max_fanout)
          (* not full *)
          then
            let s2 = insert_store s1 (r0',frame2page (Frm_L <|lf with lf_kvs = kvs'|>)) in
            let ins_state' = <|ins_state with ins_comm=S |> in
            Just(s2,ins_state',(r0::old_rs))
          (* full -- there are going to be splits *)
          else
            Nothing
       end)
     (* ascending the tree *)
     | _ -> Nothing
     end)
end
