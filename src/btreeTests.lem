open import Pervasives Set_extra Assert_extra
open import Btree

(* utility unit tests *)

(* nth_from_1 *)
assert nth_from_1_should_return_the_right_element: Utility.nth_from_1 [(1:nat);2;3;4] 3 = Just (3:nat)
assert nth_from_1_should_return_nothing_if_the_index_is_too_big: Utility.nth_from_1 [(1:nat)] 10 = Nothing
assert nth_from_1_should_return_nothing_if_the_list_is_empty: Utility.nth_from_1 ([]:(list nat)) 0 = Nothing
(* from_to *)
assert from_to_should_return_an_empty_list_for_a_wrong_range:  Utility.from_to (10:nat) (2:nat) = []
assert from_to_should_return_1_2_3_list_from_1_to_3:  Utility.from_to (1:nat) (3:nat) = [1;2;3]
(* first *)
assert first_should_return_the_element_equal_to_2_in_1_2_3_4_list: Utility.first [(1:nat);2;3;4] (fun x -> x = 2) = Just 2
assert first_should_return_nothing_if_the_condition_is_unsatisfied: Utility.first [(1:nat);2;3;4] (fun x -> x = 5) = Nothing
(* test *)
assert test_should_check_the_2nd_element_of_1_2_3_4_list_is_equal_to_2: Utility.test 2 [(1:nat);2;3;4] (fun x -> x = 2) = true
assert test_should_check_the_3rd_element_of_1_2_3_4_list_is_not_equal_to_2: Utility.test 3 [(1:nat);2;3;4] (fun x -> x = 2) = false
assert test_should_be_false_if_the_index_is_bigger_than_the_list_length: Utility.test 100 [(1:nat);2;3;4] (fun _ -> true) = false
(* replace *)
assert replace_should_replace_a_middle_element: Utility.replace (3,3,[(1:nat);2;9;4]) = Just [(1:nat);2;3;4]
assert replace_should_return_nothing_if_list_empty: Utility.replace (3,3,([]:list nat)) = Nothing
assert replace_should_return_nothing_if_index_0: Utility.replace (3,0,[(1:nat)]) = Nothing
assert replace_should_return_nothing_if_index_too_big: Utility.replace (3,3,[(1:nat)]) = Nothing
assert replace_should_return_nothing_if_index_1_and_list_empty: Utility.replace (3,1,([]:list nat)) = Nothing
(* ins *)
assert ins_should_insert_in_tail: Utility.ins (5,5,[(1:nat);2;3;4]) = Just [(1:nat);2;3;4;5]
assert ins_should_insert_in_middle: Utility.ins (5,3,[(1:nat);2;3;4]) = Just [(1:nat);2;5;3;4]
assert ins_should_append: Utility.ins (5,1,[(1:nat);2;3;4]) = Just [(5:nat);1;2;3;4]
assert ins_should_return_nothing_if_index_is_0: Utility.ins (5,0,[(1:nat);2;3;4]) = Nothing
assert ins_should_return_nothing_if_list_empty_and_index_gt_1: Utility.ins (5,2,([]:list nat)) = Nothing
assert ins_should_return_nothing_if_index_is_too_big: Utility.ins (5,3,[(1:nat)]) = Nothing
(* take2 *)
assert take2_should_split_list_in_half: Utility.take2 [(1:nat);2;3;4] 2 = ([(1:nat);2],[3;4])
assert take2_should_split_1_3: Utility.take2 [(1:nat);2;3;4] 1 = ([(1:nat)],[2;3;4])
assert take2_should_split_0_4: Utility.take2 [(1:nat);2;3;4] 0 = ([],[(1:nat);2;3;4])
assert take2_should_split_4_0: Utility.take2 [(1:nat);2;3;4] 4 = ([(1:nat);2;3;4],[])
assert take2_should_split_empty_list: Utility.take2 ([]:(list nat)) 4 = ([],[])
(* del *)
assert del_does_nothing_if_index_wrong: Utility.del (10, [(1:nat)]) = [1]
assert del_deletes_first_element: Utility.del (1, [(1:nat);2;3;4]) = [2;3;4]
assert del_deletes_last_element: Utility.del (4, [(1:nat);2;3;4]) = [1;2;3]
assert del_deletes_middle_element: Utility.del (3, [(1:nat);2;3;4;5]) = [1;2;4;5]
assert del_does_nothing_if_list_empty: Utility.del (0, ([]:(list nat))) = []
assert del_does_nothing_if_list_empty_and_index_is_1: Utility.del (1, ([]:(list nat))) = []
(* fs_impl_types unit tests *)
(* key_lte *)
assert key_lte_should_be_true_if_first_smaller: Fs_impl_types.key_lte Fs_impl_types.nat_env (Fs_impl_types.Key 1) (Fs_impl_types.Key 2) = true
assert key_lte_should_be_true_if_equal: Fs_impl_types.key_lte Fs_impl_types.nat_env (Fs_impl_types.Key 2) (Fs_impl_types.Key 2) = true
assert key_lte_should_be_false_if_first_greater: Fs_impl_types.key_lte Fs_impl_types.nat_env (Fs_impl_types.Key 3) (Fs_impl_types.Key 2) = false
(* entry_lt *)
assert entry_lt_should_be_true_if_first_smaller: Fs_impl_types.entry_lt Fs_impl_types.nat_env (Fs_impl_types.Entry 1) (Fs_impl_types.Entry 2) = true
assert entry_lt_should_be_false_if_equal: Fs_impl_types.entry_lt Fs_impl_types.nat_env (Fs_impl_types.Entry 1) (Fs_impl_types.Entry 1) = false
assert entry_lt_should_be_false_if_first_bigger: Fs_impl_types.entry_lt Fs_impl_types.nat_env (Fs_impl_types.Entry 2) (Fs_impl_types.Entry 1) = false
(* entry_lte *)
assert entry_lte_should_be_true_if_first_smaller: Fs_impl_types.entry_lte Fs_impl_types.nat_env (Fs_impl_types.Entry 1) (Fs_impl_types.Entry 2) = true
assert entry_lte_should_be_true_if_equal: Fs_impl_types.entry_lte Fs_impl_types.nat_env (Fs_impl_types.Entry 2) (Fs_impl_types.Entry 2) = true
assert entry_lte_should_be_false_if_first_greater: Fs_impl_types.entry_lte Fs_impl_types.nat_env (Fs_impl_types.Entry 3) (Fs_impl_types.Entry 2) = false

(* entries_list_h *)
assert entries_list_h_should_get_0_2_entries_from_leaf_with_0_2: BTree.entries_list_h ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 2]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 0) 1 = [Fs_impl_types.Entry 0;Fs_impl_types.Entry 2]
assert entries_list_h_should_get_0_2_3_5_entries_from_inode_pointing_to_leaves: BTree.entries_list_h ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 1])))); (Fs_impl_types.Page_id 1,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3; Fs_impl_types.Entry 5])))); (Fs_impl_types.Page_id 2,(Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 2],[Fs_impl_types.Page_id 0; Fs_impl_types.Page_id 1]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 2) 2 = [(Fs_impl_types.Entry 0);(Fs_impl_types.Entry 1);(Fs_impl_types.Entry 3);(Fs_impl_types.Entry 5)]
assert entries_list_h_should_return_empty_when_id_not_in_store: BTree.entries_list_h ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 2]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 10) 1 = []
assert entries_list_h_should_return_empty_when_empty_store: BTree.entries_list_h ((Map.fromList []):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 0) 0 = []
(* get_m *)
assert get_m_should_return_nothing_when_empty_store: BTree.get_m ((Map.fromList []):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 0) = Nothing
assert get_m_should_return_nothing_when_id_not_in_store: BTree.get_m ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 2]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 10) = Nothing
assert get_m_should_return_2_when_id_points_to_leaf_0_2: BTree.get_m ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 2]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 0) = Just (2:nat)
assert get_m_should_return_2_when_id_points_to_inode_pointing_to_2_leaves: BTree.get_m ((Map.fromList [(Fs_impl_types.Page_id 0,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0; Fs_impl_types.Entry 1])))); (Fs_impl_types.Page_id 1,(Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3; Fs_impl_types.Entry 5])))); (Fs_impl_types.Page_id 2,(Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 2],[Fs_impl_types.Page_id 0; Fs_impl_types.Page_id 1]))))]):Fs_impl_types.store nat nat nat) (Fs_impl_types.Page_id 2) = Just (2:nat)
(* inserts_in_tree *)
assert inserts_in_tree_should_insert_an_entry_in_root: BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 0] = (Fs_impl_types.Page_id 0,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 0])))])):Fs_impl_types.store nat nat nat))
assert inserts_in_tree_should_have_an_inode_and_two_leaves: BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5] = (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat))
assert inserts_in_tree_should_not_alter_the_tree_if_entries_are_already_in: BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5] = (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat))
assert inserts_in_tree_should_create_three_inodes_tree: BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11] = (Fs_impl_types.Page_id 7,(Map.fromList([(Fs_impl_types.Page_id 7,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 7],
      [Fs_impl_types.Page_id 2; Fs_impl_types.Page_id 6])));
 (Fs_impl_types.Page_id 6,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 9],
      [Fs_impl_types.Page_id 4; Fs_impl_types.Page_id 5])));
 (Fs_impl_types.Page_id 5,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 9; Fs_impl_types.Entry 10;
      Fs_impl_types.Entry 11]));
 (Fs_impl_types.Page_id 4,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 7; Fs_impl_types.Entry 8]));
 (Fs_impl_types.Page_id 3,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 5; Fs_impl_types.Entry 6]));
 (Fs_impl_types.Page_id 2,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 3; Fs_impl_types.Key 5],
      [Fs_impl_types.Page_id 0; Fs_impl_types.Page_id 1;
       Fs_impl_types.Page_id 3])));
 (Fs_impl_types.Page_id 1,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 3; Fs_impl_types.Entry 4]));
 (Fs_impl_types.Page_id 0,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 1; Fs_impl_types.Entry 2]))]):Fs_impl_types.store nat nat nat))
(* wf_btree *)
assert wf_btree_should_be_true_on_store_equal_to_empty_btree: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 0),{},0) 1 = true
assert wf_btree_should_be_false_when_first_node_lenght_is_wrong: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 0),{},1) 1 = false
assert wf_btree_should_be_false_when_height_is_0: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 0),{},0) 0 = false
assert wf_btree_should_be_false_when_btree_is_empty_and_given_height_is_2: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 0),{},0) 2 = false
assert wf_btree_should_be_false_when_the_root_id_does_not_exist: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 1),{},0) 1 = false
assert wf_btree_should_be_false_when_entry_set_has_an_entry_but_the_store_is_empty: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 0),{Fs_impl_types.Entry 0},0) 1 = false
assert wf_btree_should_be_false_when_empty_btree_has_an_inode: BTree.wf_btree Fs_impl_types.nat_env (Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.INode(Fs_impl_types.I([],[])))])) ((Fs_impl_types.Page_id 0),{},0) 1 = false
assert wf_btree_should_be_false_when_root_id_is_not_in_store_and_given_heigh_is_2: BTree.wf_btree Fs_impl_types.nat_env Fs_impl_types.nat_empty_btree_store ((Fs_impl_types.Page_id 1),{},0) 2 = false
assert wf_btree_after_inode_inserts: (fun (r,s) -> BTree.wf_btree Fs_impl_types.nat_env s (r,(Set.fromList [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5]),2) 2) (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5]) = true
assert wf_btree_should_be_true_after_3_inode_inserts: (fun (r,s) -> BTree.wf_btree Fs_impl_types.nat_env s (r,(Set.fromList [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5;Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]),2) 3) (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]) = true
assert wf_btree_should_be_false_with_a_wrong_n_after_3_inode_inserts: (fun (r,s) -> BTree.wf_btree Fs_impl_types.nat_env s (r,(Set.fromList [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5;Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]),3) 3) (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]) = false

(* example of lemma *)
lemma wf_btree_false_empty_tree: (forall e s c. BTree.wf_btree e s c 0 = false)
(* find *)
assert find_h_should_find_nothing_in_a_store_containing_an_empty_root: BTree.find_h Fs_impl_types.nat_env ((Just (Fs_impl_types.Find(Fs_impl_types.Key 3))),(Fs_impl_types.Page_id 0),Fs_impl_types.nat_empty_btree_store) 1 = (Nothing,Fs_impl_types.nat_empty_btree_store)
assert find_h_should_find_page_id_5_and_index_2_in_a_store_containing_three_inodes_and_key_10: (fun (r,s) -> BTree.find_h Fs_impl_types.nat_env (Just (Fs_impl_types.Find(Fs_impl_types.Key 10)),r,s) 3) (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]) = (Just (Fs_impl_types.Page_id 5,2),(Map.fromList([(Fs_impl_types.Page_id 7,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 7],
      [Fs_impl_types.Page_id 2; Fs_impl_types.Page_id 6])));
 (Fs_impl_types.Page_id 6,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 9],
      [Fs_impl_types.Page_id 4; Fs_impl_types.Page_id 5])));
 (Fs_impl_types.Page_id 5,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 9; Fs_impl_types.Entry 10;
      Fs_impl_types.Entry 11]));
 (Fs_impl_types.Page_id 4,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 7; Fs_impl_types.Entry 8]));
 (Fs_impl_types.Page_id 3,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 5; Fs_impl_types.Entry 6]));
 (Fs_impl_types.Page_id 2,
  Fs_impl_types.INode
   (Fs_impl_types.I
     ([Fs_impl_types.Key 3; Fs_impl_types.Key 5],
      [Fs_impl_types.Page_id 0; Fs_impl_types.Page_id 1;
       Fs_impl_types.Page_id 3])));
 (Fs_impl_types.Page_id 1,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 3; Fs_impl_types.Entry 4]));
 (Fs_impl_types.Page_id 0,
  Fs_impl_types.LNode
   (Fs_impl_types.L
     [Fs_impl_types.Entry 1; Fs_impl_types.Entry 2]))])))
assert find_h_should_find_Nothing_in_a_store_containing_just_root_without_key_2: BTree.find_h Fs_impl_types.nat_env (Just (Fs_impl_types.Find(Fs_impl_types.Key 2)),(Fs_impl_types.Page_id 0),((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L[Fs_impl_types.Entry 1; Fs_impl_types.Entry 3]))])):Fs_impl_types.store nat nat nat)) 1 = (Nothing, (Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L[Fs_impl_types.Entry 1; Fs_impl_types.Entry 3]))])))
(* find_entry *)
assert find_entry_should_find_nothing_in_an_empty_root_store:  BTree.find_entry (BTree.find_h Fs_impl_types.nat_env (Just (Fs_impl_types.Find(Fs_impl_types.Key 3)),(Fs_impl_types.Page_id 0),Fs_impl_types.nat_empty_btree_store) 1) = Nothing
assert find_entry_should_find_entry_10_in_a_store_containing_three_inodes_and_key_10: (fun (r,s) -> BTree.find_entry (BTree.find_h Fs_impl_types.nat_env (Just (Fs_impl_types.Find(Fs_impl_types.Key 10)),r,s) 3)) (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 6;Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 9;Fs_impl_types.Entry 10;Fs_impl_types.Entry 11]) = (Just (Fs_impl_types.Entry 10))
(* delete *)
assert delete_entries_should_not_change_an_empty_store: BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1] = (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store)
assert delete_entries_should_delete_a_matching_entry_from_the_root: BTree.delete_entries Fs_impl_types.nat_env (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1]) [Fs_impl_types.Entry 1] = (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store)
assert delete_entries_should_delete_a_matching_entry_from_a_leaf: (BTree.delete_entries Fs_impl_types.nat_env (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5]) [Fs_impl_types.Entry 4]) = (Fs_impl_types.Page_id 2,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2])));(Fs_impl_types.Page_id 1,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 3;Fs_impl_types.Entry 5])));(Fs_impl_types.Page_id 2,Fs_impl_types.INode(Fs_impl_types.I([Fs_impl_types.Key 3],[Fs_impl_types.Page_id 0;Fs_impl_types.Page_id 1])))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_steal_entry_3_from_right_leaf_to_delete_2: (BTree.delete_entries Fs_impl_types.nat_env (BTree.inserts_in_tree Fs_impl_types.nat_env (Fs_impl_types.Page_id 0,Fs_impl_types.nat_empty_btree_store) [Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4;Fs_impl_types.Entry 5]) [Fs_impl_types.Entry 2]) = (Fs_impl_types.Page_id 2,((Map.fromList([(Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 4],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 4; Btree.Fs_impl_types.Entry 5]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 3]))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_steal_entry_3_from_left_leaf_to_delete_5: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 4],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 4; Btree.Fs_impl_types.Entry 5]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2; Btree.Fs_impl_types.Entry 3]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 5]) = (Fs_impl_types.Page_id 2,((Map.fromList([(Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2;]))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_right_merge_leaves_to_delete_2: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 2]) = (Fs_impl_types.Page_id 0,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 3;Fs_impl_types.Entry 4])))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_left_merge_leaves_to_delete_3: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 2,((Map.fromList([(Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 3]) = (Fs_impl_types.Page_id 0,((Map.fromList([(Fs_impl_types.Page_id 0,Fs_impl_types.LNode(Fs_impl_types.L([Fs_impl_types.Entry 1;Fs_impl_types.Entry 2;Fs_impl_types.Entry 4])))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_left_steal_inode_to_delete_7_8: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 9],
      [Btree.Fs_impl_types.Page_id 4; Btree.Fs_impl_types.Page_id 5])));
 (Btree.Fs_impl_types.Page_id 5,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10;
      Btree.Fs_impl_types.Entry 11]));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 7; Btree.Fs_impl_types.Entry 8]));
 (Btree.Fs_impl_types.Page_id 3,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 5; Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3; Btree.Fs_impl_types.Key 5],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1;
       Btree.Fs_impl_types.Page_id 3])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 7;Fs_impl_types.Entry 8]) =
(Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 5],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7],
      [Btree.Fs_impl_types.Page_id 3; Btree.Fs_impl_types.Page_id 4])));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10;
      Btree.Fs_impl_types.Entry 11]));
 (Btree.Fs_impl_types.Page_id 3,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 5; Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_right_steal_inode_to_delete_5_6_4: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12;
      Btree.Fs_impl_types.Entry 13]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 9; Btree.Fs_impl_types.Key 11],
      [Btree.Fs_impl_types.Page_id 4; Btree.Fs_impl_types.Page_id 5;
       Btree.Fs_impl_types.Page_id 8])));
 (Btree.Fs_impl_types.Page_id 5,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 7; Btree.Fs_impl_types.Entry 8]));
 (Btree.Fs_impl_types.Page_id 3,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 5; Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3; Btree.Fs_impl_types.Key 5],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1;
       Btree.Fs_impl_types.Page_id 3])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 5;Fs_impl_types.Entry 6;Fs_impl_types.Entry 4]) =
(Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12;
      Btree.Fs_impl_types.Entry 13]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 9],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 11],
      [Btree.Fs_impl_types.Page_id 5; Btree.Fs_impl_types.Page_id 8])));
 (Btree.Fs_impl_types.Page_id 5,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 7; Btree.Fs_impl_types.Entry 8]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 4])));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2;
      Btree.Fs_impl_types.Entry 3]))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_right_merge_inode_to_delete_7_8_4_1_2: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 11,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 15],
      [Btree.Fs_impl_types.Page_id 9; Btree.Fs_impl_types.Page_id 10])));
 (Btree.Fs_impl_types.Page_id 10,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 15; Btree.Fs_impl_types.Entry 16;
      Btree.Fs_impl_types.Entry 17]));
 (Btree.Fs_impl_types.Page_id 9,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 13; Btree.Fs_impl_types.Entry 14]));
 (Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7; Btree.Fs_impl_types.Key 13],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6;
       Btree.Fs_impl_types.Page_id 11])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 9; Btree.Fs_impl_types.Key 11],
      [Btree.Fs_impl_types.Page_id 4; Btree.Fs_impl_types.Page_id 5;
       Btree.Fs_impl_types.Page_id 8])));
 (Btree.Fs_impl_types.Page_id 5,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 7; Btree.Fs_impl_types.Entry 8]));
 (Btree.Fs_impl_types.Page_id 3,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 5; Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3; Btree.Fs_impl_types.Key 5],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1;
       Btree.Fs_impl_types.Page_id 3])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 7;Fs_impl_types.Entry 87;Fs_impl_types.Entry 4;Fs_impl_types.Entry 1;Fs_impl_types.Entry 2]) =
(Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 11,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 15],
      [Btree.Fs_impl_types.Page_id 9; Btree.Fs_impl_types.Page_id 10])));
 (Btree.Fs_impl_types.Page_id 10,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 15; Btree.Fs_impl_types.Entry 16;
      Btree.Fs_impl_types.Entry 17]));
 (Btree.Fs_impl_types.Page_id 9,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 13; Btree.Fs_impl_types.Entry 14]));
 (Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 13],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 11])));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 8; Btree.Fs_impl_types.Entry 9;
      Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7; Btree.Fs_impl_types.Key 11],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 4;
       Btree.Fs_impl_types.Page_id 8])));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 5;
      Btree.Fs_impl_types.Entry 6]))])):Fs_impl_types.store nat nat nat))
assert delete_entries_should_left_merge_inode_to_delete_7_8_4_13_14: (BTree.delete_entries Fs_impl_types.nat_env (Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 11,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 15],
      [Btree.Fs_impl_types.Page_id 9; Btree.Fs_impl_types.Page_id 10])));
 (Btree.Fs_impl_types.Page_id 10,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 15; Btree.Fs_impl_types.Entry 16;
      Btree.Fs_impl_types.Entry 17]));
 (Btree.Fs_impl_types.Page_id 9,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 13; Btree.Fs_impl_types.Entry 14]));
 (Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7; Btree.Fs_impl_types.Key 13],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6;
       Btree.Fs_impl_types.Page_id 11])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 9; Btree.Fs_impl_types.Key 11],
      [Btree.Fs_impl_types.Page_id 4; Btree.Fs_impl_types.Page_id 5;
       Btree.Fs_impl_types.Page_id 8])));
 (Btree.Fs_impl_types.Page_id 5,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9; Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 7; Btree.Fs_impl_types.Entry 8]));
 (Btree.Fs_impl_types.Page_id 3,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 5; Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3; Btree.Fs_impl_types.Key 5],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1;
       Btree.Fs_impl_types.Page_id 3])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 4]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat)) [Fs_impl_types.Entry 7;Fs_impl_types.Entry 8;Fs_impl_types.Entry 4;Fs_impl_types.Entry 13;Fs_impl_types.Entry 14]) =
(Fs_impl_types.Page_id 7,((Map.fromList([(Btree.Fs_impl_types.Page_id 9,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 15; Btree.Fs_impl_types.Entry 16;
      Btree.Fs_impl_types.Entry 17]));
 (Btree.Fs_impl_types.Page_id 8,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 11; Btree.Fs_impl_types.Entry 12]));
 (Btree.Fs_impl_types.Page_id 7,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 7],
      [Btree.Fs_impl_types.Page_id 2; Btree.Fs_impl_types.Page_id 6])));
 (Btree.Fs_impl_types.Page_id 6,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 11; Btree.Fs_impl_types.Key 13],
      [Btree.Fs_impl_types.Page_id 4; Btree.Fs_impl_types.Page_id 8;
       Btree.Fs_impl_types.Page_id 9])));
 (Btree.Fs_impl_types.Page_id 4,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 9;
      Btree.Fs_impl_types.Entry 10]));
 (Btree.Fs_impl_types.Page_id 2,
  Btree.Fs_impl_types.INode
   (Btree.Fs_impl_types.I
     ([Btree.Fs_impl_types.Key 3],
      [Btree.Fs_impl_types.Page_id 0; Btree.Fs_impl_types.Page_id 1])));
 (Btree.Fs_impl_types.Page_id 1,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 3; Btree.Fs_impl_types.Entry 5;
      Btree.Fs_impl_types.Entry 6]));
 (Btree.Fs_impl_types.Page_id 0,
  Btree.Fs_impl_types.LNode
   (Btree.Fs_impl_types.L
     [Btree.Fs_impl_types.Entry 1; Btree.Fs_impl_types.Entry 2]))])):Fs_impl_types.store nat nat nat))
